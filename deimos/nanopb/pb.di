/* pb.di: Common parts for nanopb library.
 * Most of these are quite low-level stuff. For the high-level interface,
 * see pb_encode.di or pb_decode.di
 */
/* DEIMOS NOTE: The C version of nanopb uses packed structs/enums when __GNUC__
 * is defined. That is NOT currently supported by this D binding.
 * Therefore, nanopb's C files MUST be compiled either without __GNUC__
 * defined or (if somehow possible) with __attribute__((packed)) disabled.
 */

module deimos.nanopb.pb;
import deimos.nanopb.pb_encode;
import deimos.nanopb.pb_decode;
extern(C):

version(PB_FIELD_16BIT)
	enum ISDEF_PB_FIELD_16BIT = true;
else
	enum ISDEF_PB_FIELD_16BIT = false;

version(PB_FIELD_32BIT)
	enum ISDEF_PB_FIELD_32BIT = true;
else
	enum ISDEF_PB_FIELD_32BIT = false;

/* Number of required fields to keep track of
 * (change here or on compiler command line). */
enum PB_MAX_REQUIRED_FIELDS = 64;

static if(PB_MAX_REQUIRED_FIELDS < 64) {
	static assert(false, "You should not lower PB_MAX_REQUIRED_FIELDS from the default value (64).");
}

/* List of possible field types. These are used in the autogenerated code.
 * Least-significant 4 bits tell the scalar type
 * Most-significant 4 bits specify repeated/required/packed etc.
 * 
 * INT32 and UINT32 are treated the same, as are (U)INT64 and (S)FIXED*
 * These types are simply casted to correct field type when they are
 * assigned to the memory pointer.
 * SINT* is different, though, because it is zig-zag coded.
 */

enum pb_type_t {
    /************************
     * Field contents types *
     ************************/
    
    /* Numeric types */
    PB_LTYPE_VARINT = 0x00, /* int32, uint32, int64, uint64, bool, enum */
    PB_LTYPE_SVARINT = 0x01, /* sint32, sint64 */
    PB_LTYPE_FIXED32 = 0x02, /* fixed32, sfixed32, float */
    PB_LTYPE_FIXED64 = 0x03, /* fixed64, sfixed64, double */
    
    /* Marker for last packable field type. */
    PB_LTYPE_LAST_PACKABLE = 0x03,
    
    /* Byte array with pre-allocated buffer.
     * data_size is the length of the allocated PB_BYTES_ARRAY structure. */
    PB_LTYPE_BYTES = 0x04,
    
    /* String with pre-allocated buffer.
     * data_size is the maximum length. */
    PB_LTYPE_STRING = 0x05,
    
    /* Submessage
     * submsg_fields is pointer to field descriptions */
    PB_LTYPE_SUBMESSAGE = 0x06,
    
    /* Number of declared LTYPES */
    PB_LTYPES_COUNT = 7,
    
    /******************
     * Modifier flags *
     ******************/
    
    /* Just the basic, write data at data_offset */
    PB_HTYPE_REQUIRED = 0x00,
    
    /* Write true at size_offset */
    PB_HTYPE_OPTIONAL = 0x10,
    
    /* Read to pre-allocated array
     * Maximum number of entries is array_size,
     * actual number is stored at size_offset */
    PB_HTYPE_ARRAY = 0x20,
    
    /* Works for all required/optional/repeated fields.
     * data_offset points to pb_callback_t structure.
     * LTYPE should be 0 (it is ignored, but sometimes
     * used to speculatively index an array). */
    PB_HTYPE_CALLBACK = 0x30
}

pb_type_t PB_HTYPE(pb_type_t x) { return cast(pb_type_t)(x & 0xF0); }
pb_type_t PB_LTYPE(pb_type_t x) { return cast(pb_type_t)(x & 0x0F); }

/* This structure is used in auto-generated constants
 * to specify struct fields.
 * You can change field sizes if you need structures
 * larger than 256 bytes or field tags larger than 256.
 * The compiler should complain if your .proto has such
 * structures. Fix that by defining PB_FIELD_16BIT or
 * PB_FIELD_32BIT.
 */
alias _pb_field_t pb_field_t;
struct _pb_field_t {

static if(!ISDEF_PB_FIELD_16BIT && !ISDEF_PB_FIELD_32BIT) {
    ubyte tag;
    pb_type_t type;
    ubyte data_offset; /* Offset of field data, relative to previous field. */
    byte size_offset; /* Offset of array size or has-boolean, relative to data */
    ubyte data_size; /* Data size in bytes for a single item */
    ubyte array_size; /* Maximum number of entries in array */
}
else static if(ISDEF_PB_FIELD_16BIT && !ISDEF_PB_FIELD_32BIT) {
    ushort tag;
    pb_type_t type;
    ubyte data_offset;
    byte size_offset;
    ushort data_size;
    ushort array_size;
}
else {
    uint tag;
    pb_type_t type;
    ubyte data_offset;
    byte size_offset;
    uint data_size;
    uint array_size;
}
    
    /* Field definitions for submessage
     * OR default value for all other non-array, non-callback types
     * If null, then field will zeroed. */
    const(void) *ptr;
} // END _pb_field_t

/* This structure is used for 'bytes' arrays.
 * It has the number of bytes in the beginning, and after that an array.
 * Note that actual structs used will have a different length of bytes array.
 */
struct pb_bytes_array_t {
    size_t size;
    ubyte bytes[1];
}

/* This structure is used for giving the callback function.
 * It is stored in the message structure and filled in by the method that
 * calls pb_decode.
 *
 * The decoding callback will be given a limited-length stream
 * If the wire type was string, the length is the length of the string.
 * If the wire type was a varint/fixed32/fixed64, the length is the length
 * of the actual value.
 * The function may be called multiple times (especially for repeated types,
 * but also otherwise if the message happens to contain the field multiple
 * times.)
 *
 * The encoding callback will receive the actual output stream.
 * It should write all the data in one call, including the field tag and
 * wire type. It can write multiple fields.
 *
 * The callback can be null if you want to skip a field.
 */
alias _pb_istream_t pb_istream_t;
alias _pb_ostream_t pb_ostream_t;
alias _pb_callback_t pb_callback_t;
struct _pb_callback_t {
    union funcs_t {
        bool function(pb_istream_t *stream, const(pb_field_t) *field, void *arg) decode;
        bool function(pb_ostream_t *stream, const(pb_field_t) *field, const(void) *arg) encode;
    }
	funcs_t funcs;
    
    /* Free arg for use by callback */
    void *arg;
}

/* Wire types. Library user needs these only in encoder callbacks. */
enum pb_wire_type_t {
    PB_WT_VARINT = 0,
    PB_WT_64BIT  = 1,
    PB_WT_STRING = 2,
    PB_WT_32BIT  = 5
}

/* These macros are used to declare pb_field_t's in the constant array. */
@property auto pb_membersize(st, string m)() { mixin(`return st.`~m~`.sizeof;`); }
/* DEIMOS NOTE: These are not translated because they are only intended
 * for use by the non-header C code generated by nanopb's generator tool.
 */
/*
#define pb_arraysize(st, m) (pb_membersize(st, m) / pb_membersize(st, m[0]))
#define pb_delta(st, m1, m2) ((int)offsetof(st, m1) - (int)offsetof(st, m2))
#define pb_delta_end(st, m1, m2) (offsetof(st, m1) - offsetof(st, m2) - pb_membersize(st, m2))
#define PB_LAST_FIELD {0,(pb_type_t) 0,0,0,0,0,0}
*/

/* These macros are used for giving out error messages.
 * They are mostly a debugging aid; the main error information
 * is the true/false return value from functions.
 * Some code space can be saved by disabling the error
 * messages if not used.
 */
/* DEIMOS NOTE: PB_RETURN_ERROR returns a string to be mixed-in. */
version(PB_NO_ERRMSG) {

	string PB_RETURN_ERROR(alias stream, alias msg)() { return "return false;"; }
	string PB_GET_ERROR(T)(T stream) { return "(errmsg disabled)"; }

}
else {

	string PB_RETURN_ERROR(alias stream, alias msg)() {
		return `

	do {
        if ((`~stream.stringof~`).errmsg is null)
            (`~stream.stringof~`).errmsg = (`~msg.stringof~`);
        return false;
    } while(0);

		`;
	}
	string PB_GET_ERROR(T)(T stream) { return (stream).errmsg ? (stream).errmsg : "(none)"; }

}
